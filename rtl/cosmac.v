//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// Thu Jun 30 2022 15:24:30
//
//      Input file      : 
//      Component name  : cosmac
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------

module cosmac (
   input           clk,
   input           clk_enable,
   input           clear,
   input           dma_in_req,
   input           dma_out_req,
   input           int_req,
   input           wait_req,
   input [4:1]     ef,
   input [7:0]     data_in,
   output [7:0]    data_out,
   output [15:0]   address,
   output reg         mem_read,
   output reg        mem_write,
   output [2:0]    io_port,
   output          q_out,
   output reg [1:0]    sc

);

   parameter [7:0] inst_idl = 8'h00;
   parameter [7:0] inst_ldn = {4'h0, 4'bXXXX};
   parameter [7:0] inst_inc = {4'h1, 4'bXXXX};
   parameter [7:0] inst_dec = {4'h2, 4'bXXXX};
   
   parameter [7:0] inst_short_branch = {4'h3, 4'bXXXX};
   parameter [7:0] inst_lda = {4'h4, 4'bXXXX};
   parameter [7:0] inst_str = {4'h5, 4'bXXXX};
   parameter [7:0] inst_irx = 8'h60;
   parameter [7:0] inst_out = {4'h6, 4'b0XXX};
   parameter [7:0] inst_extend = 8'h68;
   parameter [7:0] inst_inp = {4'h6, 4'b1XXX};
   parameter [7:0] inst_ret = 8'h70;
   parameter [7:0] inst_dis = 8'h71;
   parameter [7:0] inst_ldxa = 8'h72;
   parameter [7:0] inst_stxd = 8'h73;
   parameter [7:0] inst_adc = 8'h74;
   parameter [7:0] inst_sdb = 8'h75;
   parameter [7:0] inst_shrc = 8'h76;
   parameter [7:0] inst_smb = 8'h77;
   parameter [7:0] inst_sav = 8'h78;
   parameter [7:0] inst_mark = 8'h79;
   parameter [7:0] inst_req = 8'h7a;
   parameter [7:0] inst_seq = 8'h7b;
   parameter [7:0] inst_adci = 8'h7c;
   parameter [7:0] inst_sdbi = 8'h7d;
   parameter [7:0] inst_shlc = 8'h7e;
   parameter [7:0] inst_smbi = 8'h7f;
   parameter [7:0] inst_glo = {4'h8, 4'bXXXX};
   parameter [7:0] inst_ghi = {4'h9, 4'bXXXX};
   parameter [7:0] inst_plo = {4'ha, 4'bXXXX};
   parameter [7:0] inst_phi = {4'hb, 4'bXXXX};
   parameter [7:0] inst_long_branch_skip = {4'hc, 4'bXXXX};
   parameter [7:0] inst_sep = {4'hd, 4'bXXXX};
   parameter [7:0] inst_sex = {4'he, 4'bXXXX};
   parameter [7:0] inst_ldx = 8'hf0;
   parameter [7:0] inst_or = 8'hf1;
   parameter [7:0] inst_and = 8'hf2;
   parameter [7:0] inst_xor = 8'hf3;
   parameter [7:0] inst_add = 8'hf4;
   parameter [7:0] inst_sub = 8'hf5;
   parameter [7:0] inst_shr = 8'hf6;
   parameter [7:0] inst_sm = 8'hf7;
   parameter [7:0] inst_ldi = 8'hf8;
   parameter [7:0] inst_ori = 8'hf9;
   parameter [7:0] inst_ani = 8'hfa;
   parameter [7:0] inst_xri = 8'hfb;
   parameter [7:0] inst_adi = 8'hfc;
   parameter [7:0] inst_sdi = 8'hfd;
   parameter [7:0] inst_shl = 8'hfe;
   parameter [7:0] inst_smi = 8'hff;
   
   parameter [1:0] sc_fetch = 2'b00;
   parameter [1:0] sc_execute = 2'b01;
   parameter [1:0] sc_dma = 2'b10;
   parameter [1:0] sc_interrupt = 2'b11;
   
   reg [3:0]       state;
   reg [3:0]       next_state;
   parameter [3:0] state_clear = 4'b0000;
   parameter [3:0] state_clear_2 = 4'b0001;
   parameter [3:0] state_load = 4'b0010;
   parameter [3:0] state_fetch = 4'b0011;
   parameter [3:0] state_execute = 4'b0100;
   parameter [3:0] state_execute_2 = 4'b0101;
   parameter [3:0] state_dma_in = 4'b0110;
   parameter [3:0] state_dma_out = 4'b0111;
   parameter [3:0] state_interrupt = 4'b1000;
   
   reg [7:0]       r_low[0:15];
   reg [7:0]       r_high[0:15];
   
   reg [7:0]       ir;
   reg [3:0] i = ir[7:4];
   reg [3:0] n = ir[3:0];
   
   reg [7:0]       d;
   reg             df;
   
   reg [3:0]       x;
   reg [3:0]       p;
   
   reg [7:0]       t;
   
   reg             ie;
   reg             q;
   
   wire            d_zero;
   
   reg [7:0]       prev_data_in;
   reg             cond_branch;
   reg             cond_no_skip;
   
   wire [3:0]      r_addr;
   wire [15:0]     r_write_data;
   wire [15:0]     r_read_data;
   wire [7:0]      r_read_data_byte;
   
   wire [15:0]     adder_opb;
   wire [15:0]     adder_result;
   
   wire [0:0]      alu_carry_in;
   wire [3:0]      alu_op_d;
   wire [3:0]      alu_op_data_in;
   wire [3:0]      alu_sum;
   wire [7:0]      alu_out;
   
   wire            rotate_in;
   
   wire [7:0]      shifter_out;
   
   wire            waiting;
   
   reg [2:0]       r_addr_sel;
   parameter [2:0] r_addr_sel_p = 3'b000;
   parameter [2:0] r_addr_sel_n = 3'b001;
   parameter [2:0] r_addr_sel_2 = 3'b010;
   parameter [2:0] r_addr_sel_x = 3'b011;
   parameter [2:0] r_addr_sel_0 = 3'b100;
   
   reg [2:0]       r_write_data_sel;
   parameter [2:0] r_write_data_sel_adder = 3'b000;
   parameter [2:0] r_write_data_sel_branch = 3'b001;
   parameter [2:0] r_write_data_sel_d = 3'b010;
   parameter [2:0] r_write_data_sel_data_in = 3'b011;
   parameter [2:0] r_write_data_sel_0 = 3'b100;
   
   reg             r_write_low;
   reg             r_write_high;
   
   reg [1:0]       data_out_sel;
   parameter [1:0] data_out_sel_d = 2'b00;
   parameter [1:0] data_out_sel_xp = 2'b01;
   parameter [1:0] data_out_sel_t = 2'b10;
   
   reg [2:0]       d_sel;
   parameter [2:0] d_sel_hold = 3'b000;
   parameter [2:0] d_sel_data_in = 3'b001;
   parameter [2:0] d_sel_alu = 3'b010;
   parameter [2:0] d_sel_shifter = 3'b011;
   parameter [2:0] d_sel_r = 3'b100;
   parameter [2:0] d_sel_0 = 3'b101;
   
   reg [1:0]       df_sel;
   parameter [1:0] df_sel_hold = 2'b00;
   parameter [1:0] df_sel_carry = 2'b01;
   parameter [1:0] df_sel_d0 = 2'b10;
   parameter [1:0] df_sel_d7 = 2'b11;
   
   reg [2:0]       xp_sel;
   parameter [2:0] xp_sel_hold = 3'b000;
   parameter [2:0] xp_sel_clear = 3'b001;
   parameter [2:0] xp_sel_interrupt = 3'b010;
   parameter [2:0] xp_sel_data_in = 3'b011;
   parameter [2:0] xp_sel_mark = 3'b100;
   parameter [2:0] xp_sel_sep = 3'b101;
   parameter [2:0] xp_sel_sex = 3'b110;
   
   reg [1:0]       ie_sel;
   parameter [1:0] ie_sel_hold = 2'b00;
   parameter [1:0] ie_sel_not_ir0 = 2'b01;
   parameter [1:0] ie_sel_0 = 2'b10;
   parameter [1:0] ie_sel_1 = 2'b11;
   
   reg [1:0]       q_sel;
   parameter [1:0] q_sel_hold = 2'b00;
   parameter [1:0] q_sel_ir0 = 2'b01;
   parameter [1:0] q_sel_0 = 2'b10;
   parameter [1:0] q_sel_1 = 2'b11;
   
   reg             load_ir;
   reg             load_t;
   
   reg [1:0]       adder_opb_sel;
   parameter [1:0] adder_opb_sel_0 = 2'b00;
   parameter [1:0] adder_opb_sel_1 = 2'b01;
   parameter [1:0] adder_opb_sel_m1 = 2'b11;
   parameter [1:0] adder_opb_sel_m2 = 2'b10;
   
   assign q_out = q;
   
   assign r_read_data = {r_high[r_addr], r_low[r_addr]};
   
   assign address = r_read_data;
   
   assign adder_opb = (adder_opb_sel == adder_opb_sel_1) ? 16'h0001 : 
                      (adder_opb_sel == adder_opb_sel_m1) ? 16'hffff : 
                      (adder_opb_sel == adder_opb_sel_m2) ? 16'hfffe : 
                      16'h0000;
   
   assign adder_result = (r_read_data + adder_opb);
   
   assign r_read_data_byte = (ir[4] == 1'b1) ? r_read_data[15:8] : 
                             r_read_data[7:0];
   
   assign alu_op_d = (ir[1:0] == 2'b01) ? ({1'b0, (~d)}) : 
                     ({1'b0, d});
   
   assign alu_op_data_in = (ir[1:0] == 2'b11) ? ({1'b0, (~data_in)}) : 
                           ({1'b0, data_in});
   
   assign alu_carry_in[0] = (ir[7] == 1'b0) ? df : 
                            ir[0];
   
   assign alu_sum = alu_op_d + alu_op_data_in + alu_carry_in;
   
   assign alu_out = (ir[2:0] == 3'b001) ? {8{d}} | data_in : 
                    (ir[2:0] == 3'b010) ? {8{d}} & data_in : 
                    (ir[2:0] == 3'b011) ? {8{d}} ^ data_in : 
                    (alu_sum[7:0]);
   
   assign rotate_in = (ir[7] == 1'b0) ? df : 
                      1'b0;
   
   assign shifter_out = (ir[3] == 1'b1) ? {d[6:0], rotate_in} : 
                        {rotate_in, d[7:1]};
   
   assign r_addr = (r_addr_sel == r_addr_sel_p) ? p : 
                   (r_addr_sel == r_addr_sel_n) ? n : 
                   (r_addr_sel == r_addr_sel_x) ? x : 
                   (r_addr_sel == r_addr_sel_2) ? 4'h2 : 
                   4'h0;
   
   assign r_write_data = (r_write_data_sel == r_write_data_sel_data_in) ? {data_in, data_in} : 
                         (r_write_data_sel == r_write_data_sel_d) ? {d, d} : 
                         (r_write_data_sel == r_write_data_sel_0) ? 16'h0000 : 
                         (r_write_data_sel == r_write_data_sel_branch & cond_branch == 1'b1) ? {prev_data_in, data_in} : 
                         adder_result;
   
   assign data_out = (data_out_sel == data_out_sel_xp) ? {x, p} : 
                     (data_out_sel == data_out_sel_t) ? t : 
                     d;
   
   assign io_port = (state == state_execute & i == inst_out[7:4]) ? n[2:0] : 
                    3'b000;
   
   assign waiting = ((wait_req == 1'b1) & (clear == 1'b0)) ? 1'b1 : 
                    1'b0;
   
   // r_p
   always @(clk_enable or posedge clk) begin
         if (waiting == 1'b0)
         begin
            if (r_write_low == 1'b1)
               r_low[r_addr] <= r_write_data[7:0];
            if (r_write_high == 1'b1)
               r_high[r_addr] <= r_write_data[15:8];
         end
   end
   
   // xp_p
   always @(posedge clk) begin
      if (clk_enable == 1'b1)
      begin
         if (waiting == 1'b0)
         begin
            if (xp_sel == xp_sel_clear)
            begin
               p <= 4'h0;
               x <= 4'h0;
            end
            else if (xp_sel == xp_sel_interrupt)
            begin
               p <= 4'h1;
               x <= 4'h2;
            end
            else if (xp_sel == xp_sel_data_in)
            begin
               p <= data_in[3:0];
               x <= data_in[7:4];
            end
            else if (xp_sel == xp_sel_mark)
               x <= p;
            else if (xp_sel == xp_sel_sep)
               p <= n;
            else if (xp_sel == xp_sel_sex)
               x <= n;
         end
      end
   end
   
   // d_p
   always @(posedge clk) begin
      if (clk_enable == 1'b1)
      begin
         if (waiting == 1'b0)
         begin
            if (d_sel == d_sel_data_in)
               d <= data_in;
            else if (d_sel == d_sel_alu)
               d <= alu_out;
            else if (d_sel == d_sel_shifter)
               d <= shifter_out;
            else if (d_sel == d_sel_r)
               d <= r_read_data_byte;
            else if (d_sel == d_sel_0)
               d <= 8'b00000000;
         end
      end
   end
   
   // df_p
   always @(posedge clk) begin
      if (clk_enable == 1'b1)
      begin
         if (waiting == 1'b0)
         begin
            if (df_sel == df_sel_carry)
               df <= alu_sum[8];
            else if (df_sel == df_sel_d0)
               df <= d[0];
            else if (df_sel == df_sel_d7)
               df <= d[7];
         end
      end
   end
   
   // ir_p
   always @(posedge clk) begin
      if (clk_enable == 1'b1)
      begin
         if (waiting == 1'b0)
         begin
            if (load_ir == 1'b1)
               ir <= data_in;
         end
      end
   end
   
   // t_p
   always @(posedge clk) begin
      if (clk_enable == 1'b1)
      begin
         if (waiting == 1'b0)
         begin
            if (load_t == 1'b1)
               t <= {x, p};
         end
      end
   end
   
   // q_p
   always @(posedge clk) begin
      if (clk_enable == 1'b1)
      begin
         if (waiting == 1'b0)
         begin
            if (q_sel == q_sel_0)
               q <= 1'b0;
            else if (q_sel == q_sel_1)
               q <= 1'b1;
            else if (q_sel == q_sel_ir0)
               q <= ir[0];
         end
      end
   end
   
   // ie_p
   always @(posedge clk) begin
      if (clk_enable == 1'b1)
      begin
         if (waiting == 1'b0)
         begin
            if (ie_sel == ie_sel_0)
               ie <= 1'b0;
            else if (ie_sel == ie_sel_1)
               ie <= 1'b1;
            else if (ie_sel == ie_sel_not_ir0)
               ie <= (~ir[0]);
         end
      end
   end
   
   // prev_data_in_p
   always @(posedge clk) begin
      if (clk_enable == 1'b1)
      begin
         if (waiting == 1'b0)
            prev_data_in <= data_in;
      end
   end
   
   assign d_zero = (d == 8'h00) ? 1'b1 : 
                   1'b0;
   
   // cond_branch_p
   always @(ir or q or d_zero or df or ef) begin
      reg             cond_branch_no_pol;
      case (ir[2:0])
         3'b000 :
            cond_branch_no_pol = 1'b1;
         3'b001 :
            cond_branch_no_pol = q;
         3'b010 :
            cond_branch_no_pol = d_zero;
         3'b011 :
            cond_branch_no_pol = df;
         3'b100 :
            cond_branch_no_pol = ef[1];
         3'b101 :
            cond_branch_no_pol = ef[2];
         3'b110 :
            cond_branch_no_pol = ef[3];
         3'b111 :
            cond_branch_no_pol = ef[4];
         default :
            ;
      endcase
      cond_branch <= cond_branch_no_pol ^ ir[3];
   end
   
   // cond_no_skip_p
   always @(ir or ie or q or d_zero or df) begin
      reg             cond_no_skip_no_pol;
      case (ir[1:0])
         2'b00 :
            if (ir[3] == 1'b1)
               cond_no_skip_no_pol = ie;
            else
               cond_no_skip_no_pol = 1'b1;
         2'b01 :
            cond_no_skip_no_pol = q;
         2'b10 :
            cond_no_skip_no_pol = d_zero;
         2'b11 :
            cond_no_skip_no_pol = df;
         default :
            ;
      endcase
      cond_no_skip <= cond_no_skip_no_pol ^ ir[3];
   end
   
   // control_p
   always @(state or clear or wait_req or ir or dma_in_req or dma_out_req or int_req or ie or cond_no_skip) begin
      r_addr_sel <= r_addr_sel_p;
      r_write_data_sel <= r_write_data_sel_adder;
      r_write_high <= 1'b0;
      r_write_low <= 1'b0;
      mem_read <= 1'b0;
      mem_write <= 1'b0;
      data_out_sel <= data_out_sel_d;
      d_sel <= d_sel_hold;
      df_sel <= df_sel_hold;
      load_ir <= 1'b0;
      load_t <= 1'b0;
      q_sel <= q_sel_hold;
      ie_sel <= ie_sel_hold;
      xp_sel <= xp_sel_hold;
      adder_opb_sel <= adder_opb_sel_1;
      sc <= sc_execute;
      next_state <= state;
      
      case (state)
         state_clear :
            begin
               sc <= sc_execute;
               next_state <= state_clear_2;
               d_sel <= d_sel_0;
               xp_sel <= xp_sel_clear;
               q_sel <= q_sel_0;
               ie_sel <= ie_sel_1;
               r_addr_sel <= r_addr_sel_0;
               r_write_data_sel <= r_write_data_sel_0;
               r_write_high <= 1'b1;
               r_write_low <= 1'b1;
            end
         state_clear_2 :
            begin
               sc <= sc_execute;
               df_sel <= df_sel_d0;
               if (clear == 1'b0)
                  next_state <= state_fetch;
               else if (wait_req == 1'b1)
               begin
                  r_addr_sel <= r_addr_sel_p;
                  adder_opb_sel <= adder_opb_sel_m1;
                  r_write_data_sel <= r_write_data_sel_adder;
                  r_write_high <= 1'b1;
                  r_write_low <= 1'b1;
                  mem_read <= 1'b1;
                  next_state <= state_load;
               end
            end
         state_load :
            begin
               sc <= sc_execute;
               r_addr_sel <= r_addr_sel_p;
               mem_read <= 1'b1;
               if (dma_in_req == 1'b1)
               begin
                  r_addr_sel <= r_addr_sel_p;
                  adder_opb_sel <= adder_opb_sel_1;
                  r_write_data_sel <= r_write_data_sel_adder;
                  r_write_high <= 1'b1;
                  r_write_low <= 1'b1;
                  next_state <= state_dma_in;
               end
               else if (dma_out_req == 1'b1)
               begin
                  r_addr_sel <= r_addr_sel_p;
                  adder_opb_sel <= adder_opb_sel_1;
                  r_write_data_sel <= r_write_data_sel_adder;
                  r_write_high <= 1'b1;
                  r_write_low <= 1'b1;
                  next_state <= state_dma_out;
               end
               else if (clear == 1'b0)
                  next_state <= state_clear;
            end
         state_fetch :
            begin
               sc <= sc_fetch;
               next_state <= state_execute;
               r_addr_sel <= r_addr_sel_p;
               adder_opb_sel <= adder_opb_sel_1;
               r_write_data_sel <= r_write_data_sel_adder;
               r_write_high <= 1'b1;
               r_write_low <= 1'b1;
               mem_read <= 1'b1;
               load_ir <= 1'b1;
            end
         state_execute :
            begin
               sc <= sc_execute;
               if (dma_in_req == 1'b1)
                  next_state <= state_dma_in;
               else if (dma_out_req == 1'b1)
                  next_state <= state_dma_out;
               else if (int_req == 1'b1 & ie == 1'b1)
                  next_state <= state_interrupt;
               else if (ir == inst_idl)
                  next_state <= state_execute;
               else
                  next_state <= state_fetch;
               if (ir == inst_idl)
               begin
                  r_addr_sel <= r_addr_sel_0;
                  mem_read <= 1'b1;
               end
               else if (i == inst_ldn[7:4])
               begin
                  r_addr_sel <= r_addr_sel_n;
                  mem_read <= 1'b1;
                  d_sel <= d_sel_data_in;
               end
               else if (i == inst_inc[7:4])
               begin
                  r_addr_sel <= r_addr_sel_n;
                  adder_opb_sel <= adder_opb_sel_1;
                  r_write_data_sel <= r_write_data_sel_adder;
                  r_write_high <= 1'b1;
                  r_write_low <= 1'b1;
               end
               else if (i == inst_dec[7:4])
               begin
                  r_addr_sel <= r_addr_sel_n;
                  adder_opb_sel <= adder_opb_sel_m1;
                  r_write_data_sel <= r_write_data_sel_adder;
                  r_write_high <= 1'b1;
                  r_write_low <= 1'b1;
               end
               else if (i == inst_short_branch[7:4])
               begin
                  r_addr_sel <= r_addr_sel_p;
                  adder_opb_sel <= adder_opb_sel_1;
                  r_write_data_sel <= r_write_data_sel_branch;
                  r_write_high <= 1'b0;
                  r_write_low <= 1'b1;
                  mem_read <= 1'b1;
               end
               else if (i == inst_lda[7:4])
               begin
                  r_addr_sel <= r_addr_sel_n;
                  adder_opb_sel <= adder_opb_sel_1;
                  r_write_data_sel <= r_write_data_sel_adder;
                  r_write_high <= 1'b1;
                  r_write_low <= 1'b1;
                  mem_read <= 1'b1;
                  d_sel <= d_sel_data_in;
               end
               else if (i == inst_str[7:4])
               begin
                  r_addr_sel <= r_addr_sel_n;
                  data_out_sel <= data_out_sel_d;
                  mem_write <= 1'b1;
               end
               else if (i == inst_out[7:4] & n[3] == 1'b0)
               begin
                  r_addr_sel <= r_addr_sel_x;
                  adder_opb_sel <= adder_opb_sel_1;
                  r_write_data_sel <= r_write_data_sel_adder;
                  r_write_high <= 1'b1;
                  r_write_low <= 1'b1;
                  mem_read <= 1'b1;
               end
               else if (i == inst_inp[7:4] & n[3] == 1'b1)
               begin
                  r_addr_sel <= r_addr_sel_x;
                  mem_write <= 1'b1;
                  d_sel <= d_sel_data_in;
               end
               else if (ir == inst_ret | ir == inst_dis)
               begin
                  r_addr_sel <= r_addr_sel_x;
                  adder_opb_sel <= adder_opb_sel_1;
                  r_write_data_sel <= r_write_data_sel_adder;
                  r_write_high <= 1'b1;
                  r_write_low <= 1'b1;
                  mem_read <= 1'b1;
                  xp_sel <= xp_sel_data_in;
                  ie_sel <= ie_sel_not_ir0;
               end
               else if (ir == inst_ldxa)
               begin
                  r_addr_sel <= r_addr_sel_x;
                  adder_opb_sel <= adder_opb_sel_1;
                  r_write_data_sel <= r_write_data_sel_adder;
                  r_write_high <= 1'b1;
                  r_write_low <= 1'b1;
                  mem_read <= 1'b1;
                  d_sel <= d_sel_data_in;
               end
               else if (ir == inst_stxd)
               begin
                  r_addr_sel <= r_addr_sel_x;
                  adder_opb_sel <= adder_opb_sel_m1;
                  data_out_sel <= data_out_sel_d;
                  r_write_data_sel <= r_write_data_sel_adder;
                  r_write_high <= 1'b1;
                  r_write_low <= 1'b1;
                  mem_write <= 1'b1;
               end
               else if (ir == inst_adc | ir == inst_sdb | ir == inst_smb | ir == inst_add | ir == inst_sub | ir == inst_sm)
               begin
                  r_addr_sel <= r_addr_sel_x;
                  mem_read <= 1'b1;
                  d_sel <= d_sel_alu;
                  df_sel <= df_sel_carry;
               end
               else if (ir == inst_shrc | ir == inst_shr)
               begin
                  d_sel <= d_sel_shifter;
                  df_sel <= df_sel_d0;
               end
               else if (ir == inst_sav)
               begin
                  r_addr_sel <= r_addr_sel_x;
                  data_out_sel <= data_out_sel_t;
                  mem_write <= 1'b1;
               end
               else if (ir == inst_mark)
               begin
                  r_addr_sel <= r_addr_sel_2;
                  adder_opb_sel <= adder_opb_sel_m1;
                  r_write_data_sel <= r_write_data_sel_adder;
                  r_write_high <= 1'b1;
                  r_write_low <= 1'b1;
                  data_out_sel <= data_out_sel_xp;
                  load_t <= 1'b1;
                  xp_sel <= xp_sel_mark;
               end
               else if (ir == inst_req | ir == inst_seq)
                  q_sel <= q_sel_ir0;
               else if (ir == inst_adci | ir == inst_sdbi | ir == inst_smbi | ir == inst_adi | ir == inst_sdi | ir == inst_smi)
               begin
                  r_addr_sel <= r_addr_sel_p;
                  adder_opb_sel <= adder_opb_sel_1;
                  r_write_data_sel <= r_write_data_sel_adder;
                  r_write_high <= 1'b1;
                  r_write_low <= 1'b1;
                  mem_read <= 1'b1;
                  d_sel <= d_sel_alu;
                  df_sel <= df_sel_carry;
               end
               else if (ir == inst_shlc | ir == inst_shl)
               begin
                  d_sel <= d_sel_shifter;
                  df_sel <= df_sel_d7;
               end
               else if (i == inst_glo[7:4] | i == inst_ghi[7:4])
               begin
                  r_addr_sel <= r_addr_sel_n;
                  d_sel <= d_sel_r;
               end
               else if (i == inst_plo[7:4])
               begin
                  r_addr_sel <= r_addr_sel_n;
                  r_write_data_sel <= r_write_data_sel_d;
                  r_write_high <= 1'b0;
                  r_write_low <= 1'b1;
               end
               else if (i == inst_phi[7:4])
               begin
                  r_addr_sel <= r_addr_sel_n;
                  r_write_data_sel <= r_write_data_sel_d;
                  r_write_high <= 1'b1;
                  r_write_low <= 1'b0;
               end
               else if (i == inst_long_branch_skip[7:4])
               begin
                  next_state <= state_execute_2;
                  if (ir[2] == 1'b0)
                  begin
                     r_addr_sel <= r_addr_sel_p;
                     adder_opb_sel <= adder_opb_sel_1;
                     r_write_data_sel <= r_write_data_sel_adder;
                     r_write_high <= 1'b1;
                     r_write_low <= 1'b1;
                     mem_read <= 1'b1;
                  end
                  else
                  begin
                     r_addr_sel <= r_addr_sel_p;
                     if (cond_no_skip == 1'b1)
                        adder_opb_sel <= adder_opb_sel_0;
                     else
                        adder_opb_sel <= adder_opb_sel_1;
                     r_write_data_sel <= r_write_data_sel_adder;
                     r_write_high <= 1'b1;
                     r_write_low <= 1'b1;
                  end
               end
               else if (i == inst_sep[7:4])
                  xp_sel <= xp_sel_sep;
               else if (i == inst_sex[7:4])
                  xp_sel <= xp_sel_sex;
               else if (ir == inst_ldx)
               begin
                  r_addr_sel <= r_addr_sel_x;
                  mem_read <= 1'b1;
                  d_sel <= d_sel_data_in;
               end
               else if (ir == inst_or | ir == inst_and | ir == inst_xor)
               begin
                  r_addr_sel <= r_addr_sel_x;
                  mem_read <= 1'b1;
                  d_sel <= d_sel_alu;
               end
               else if (ir == inst_ldi)
               begin
                  r_addr_sel <= r_addr_sel_p;
                  adder_opb_sel <= adder_opb_sel_1;
                  r_write_data_sel <= r_write_data_sel_adder;
                  r_write_high <= 1'b1;
                  r_write_low <= 1'b1;
                  mem_read <= 1'b1;
                  d_sel <= d_sel_data_in;
               end
               else if (ir == inst_ori | ir == inst_ani | ir == inst_xri)
               begin
                  r_addr_sel <= r_addr_sel_p;
                  adder_opb_sel <= adder_opb_sel_1;
                  r_write_data_sel <= r_write_data_sel_adder;
                  r_write_high <= 1'b1;
                  r_write_low <= 1'b1;
                  mem_read <= 1'b1;
                  d_sel <= d_sel_alu;
               end
               else
                  ;
            end
         state_execute_2 :
            begin
               sc <= sc_execute;
               if (dma_in_req == 1'b1)
                  next_state <= state_dma_in;
               else if (dma_out_req == 1'b1)
                  next_state <= state_dma_out;
               else if (int_req == 1'b1 & ie == 1'b1)
                  next_state <= state_interrupt;
               else
                  next_state <= state_fetch;
               if (ir[2] == 1'b0)
               begin
                  r_addr_sel <= r_addr_sel_p;
                  r_write_data_sel <= r_write_data_sel_branch;
                  r_write_high <= 1'b1;
                  r_write_low <= 1'b1;
                  mem_read <= 1'b1;
               end
               else
               begin
                  r_addr_sel <= r_addr_sel_p;
                  if (cond_no_skip == 1'b1)
                     adder_opb_sel <= adder_opb_sel_0;
                  else
                     adder_opb_sel <= adder_opb_sel_1;
                  r_write_data_sel <= r_write_data_sel_adder;
                  r_write_high <= 1'b1;
                  r_write_low <= 1'b1;
               end
            end
         state_dma_in :
            begin
               sc <= sc_dma;
               r_addr_sel <= r_addr_sel_0;
               adder_opb_sel <= adder_opb_sel_1;
               r_write_data_sel <= r_write_data_sel_adder;
               r_write_high <= 1'b1;
               r_write_low <= 1'b1;
               mem_write <= 1'b1;
               if (dma_in_req == 1'b1)
                  next_state <= state_dma_in;
               else if (dma_out_req == 1'b1)
                  next_state <= state_dma_out;
               else if (clear == 1'b1)
               begin
                  r_write_high <= 1'b0;
                  r_write_low <= 1'b0;
                  next_state <= state_load;
               end
               else if (int_req == 1'b1 & ie == 1'b1)
                  next_state <= state_interrupt;
               else
                  next_state <= state_fetch;
            end
         state_dma_out :
            begin
               sc <= sc_dma;
               r_addr_sel <= r_addr_sel_0;
               adder_opb_sel <= adder_opb_sel_1;
               r_write_data_sel <= r_write_data_sel_adder;
               r_write_high <= 1'b1;
               r_write_low <= 1'b1;
               mem_read <= 1'b1;
               if (dma_in_req == 1'b1)
                  next_state <= state_dma_in;
               else if (dma_out_req == 1'b1)
                  next_state <= state_dma_out;
               else if (clear == 1'b1)
               begin
                  r_write_high <= 1'b0;
                  r_write_low <= 1'b0;
                  next_state <= state_load;
               end
               else if (int_req == 1'b1 & ie == 1'b1)
                  next_state <= state_interrupt;
               else
                  next_state <= state_fetch;
            end
         state_interrupt :
            begin
               sc <= sc_interrupt;
               if (dma_in_req == 1'b1)
                  next_state <= state_dma_in;
               else if (dma_out_req == 1'b1)
                  next_state <= state_dma_out;
               else
                  next_state <= state_fetch;
               load_t <= 1'b1;
               xp_sel <= xp_sel_interrupt;
               ie_sel <= ie_sel_0;
            end
         default :
            begin
               sc <= sc_execute;
               next_state <= state_clear;
            end
      endcase
   end
   
   // state_p
   always @(posedge clk) begin
      if (clk_enable == 1'b1)
      begin
         if (clear == 1'b1 & wait_req == 1'b0)
            state <= state_clear;
         else if (waiting == 1'b0)
            state <= next_state;
      end
   end
   
endmodule
